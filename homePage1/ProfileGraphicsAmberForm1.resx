<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>